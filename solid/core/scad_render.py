from pathlib import Path

from .utils import indent
from .object_base import ObjectBase, OpenSCADObject

# =========================================
# = Rendering Python code to OpenSCAD code=
# =========================================
def scad_render(root, file_header = '', _fn=None):
    # Scan the tree for all instances of
    # OpenSCADObject, storing their strings
    include_strings = get_include_strings(root)

    # and render the string
    includes = '\n'.join(include_strings)
    includes += '\n' if includes else ''

    #call extensions pre_render
    from .extension_manager import default_extension_manager
    extensions_header_str = default_extension_manager.call_pre_render(root)
    extensions_header_str += "\n" if extensions_header_str else ''

    #wrap the extensions around the root node
    root = default_extension_manager.wrap_root_node(root)

    scad_body = root._render()

    #call extensions post_render
    extensions_footer_str = default_extension_manager.call_post_render(root)
    extensions_footer_str += "\n" if extensions_footer_str else ''

    if _fn:
        file_header += f'$fn = {_fn};\n\n'

    return file_header + includes + extensions_header_str + scad_body \
                       + extensions_footer_str

def scad_render_to_file(scad_object, filename=None, out_dir='',
                        file_header='', include_orig_code=True, _fn=None):

    if out_dir == None:
        out_dir = ''
    header = f"// Generated by ExpSolidPython\n" + file_header + "\n"

    rendered_string = scad_render(scad_object, header, _fn)

    return _write_to_file(rendered_string, filename, out_dir)

def _write_to_file(out_string, filename=None, outdir=''):
    outfile = filename

    if not outfile:
        #try to get the filename of the calling module
        import __main__
        if hasattr(__main__, "__file__"):
            #not called from a terminal
            calling_file = Path(__main__.__file__).absolute()
            outfile = calling_file.with_suffix(".scad")
        else:
            outfile = "expsolid_out.scad"

    outpath = Path(outdir)
    if not outpath.exists():
        outpath.mkdir()

    outfile_path = outpath / Path(outfile)

    outfile_path.write_text(out_string)
    return outfile_path.absolute().as_posix()

def get_include_strings(obj):
    if not isinstance(obj, ObjectBase):
        return set()

    include_strings = set()

    if isinstance(obj, OpenSCADObject):
        include_strings.add(obj.include_string)

        # We also accept OpenSCADObject instances as parameters to functions,
        # so search in obj.params as well
        for param in obj.params.values():
            include_strings.update(get_include_strings(param))

    for child in obj.children:
        include_strings.update(get_include_strings(child))

    include_strings.discard(None)

    return include_strings

