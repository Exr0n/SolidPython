import datetime
import regex as re
import pkg_resources

from pathlib import Path

from .helpers import calling_module, indent

# =========================================
# = Rendering Python code to OpenSCAD code=
# =========================================
def get_include_strings(obj):
    if not hasattr(obj, "include_string"):
        return set()

    include_strings = set()
    include_strings.add(obj.include_string)

    for child in obj.children:
        include_strings.update(_find_include_strings(child))

    # We also accept OpenSCADObject instances as parameters to functions,
    # so search in obj.params as well
    for param in obj.params.values():
        include_strings.update(_find_include_strings(param))

    include_strings.discard(None)

    return include_strings

def scad_render(root, file_header = ''):
    # Scan the tree for all instances of
    # OpenSCADObject, storing their strings
    include_strings = get_include_strings(root)

    # and render the string
    includes = '\n'.join(include_strings)
    includes += '\n' if includes else ''

    #call libraries pre_render and let them wrap the root node
    from .extension_base import default_extension_manager
    root, extensions_header_str = \
        default_extension_manager.call_pre_render_and_wrap_root_node(root)

    scad_body = root._render()

    if file_header and not file_header.endswith('\n'): 
        file_header += '\n'

    return file_header + includes + extensions_header_str + scad_body

def scad_render_to_file(scad_object, filepath=None, out_dir=None,
                        file_header='', include_orig_code=True):
    header = file_header
    if include_orig_code:
        version = _get_version()
        date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        header = f"// Generated by SolidPython {version} on {date}\n" + file_header

    rendered_string = scad_render(scad_object, header)
    return _write_code_to_file(rendered_string, filepath, out_dir, include_orig_code)

def _write_code_to_file(rendered_string, filepath=None, out_dir=None, include_orig_code=True):
    try:
        calling_file = Path(calling_module(stack_depth=3).__file__).absolute()
        # Output path is determined four ways:
        # -- If filepath is supplied, use filepath
        # -- If no filepath is supplied but an out_dir is supplied, 
        #       give the calling file a .scad suffix and put it in out_dir
        # -- If neither filepath nor out_dir are supplied, give the new
        #       file a .scad suffix and put it next to the calling file
        # -- If no path info is supplied and we can't find a calling file 
        #       (i.e, this is being called from an interactive terminal), 
        #       write a file to Path.cwd() / 'solid.scad'
        out_path = Path()
        if filepath:
            out_path = Path(filepath)
        elif out_dir:
            odp = Path(out_dir)
            if not odp.exists():
                odp.mkdir()
            out_path = odp / calling_file.with_suffix('.scad').name
        else:
            out_path = calling_file.with_suffix('.scad')
        
        if include_orig_code:
            rendered_string += sp_code_in_scad_comment(calling_file)
    except AttributeError as e:
        # If no calling_file was found, this is being called from the terminal.
        # We can't read original code from a file, so don't try,
        # and can't read filename from the calling file either, so just save to
        # solid.scad.

        if filepath:
            out_path = Path(filepath)
        else:
            odp = Path(out_dir) if out_dir else Path.cwd()
            if not odp.exists():
                odp.mkdir()
            out_path = odp / 'solid_out.scad'

    out_path.write_text(rendered_string)
    return out_path.absolute().as_posix()

def _get_version() -> str:
    """
    Returns SolidPython version
    Returns '<Unknown>' if no version can be found
    """
    version = '<Unknown>'
    try:
        # if SolidPython is installed use `pkg_resources`
        version = pkg_resources.get_distribution('solidpython').version

    except pkg_resources.DistributionNotFound:
        # if the running SolidPython is not the one installed via pip,
        # try to read it from the project setup file
        version_pattern = re.compile(r"version = ['\"]([^'\"]*)['\"]")
        version_file_path = Path(__file__).parent.parent / 'pyproject.toml'
        if version_file_path.exists():
            version_match = version_pattern.search(version_file_path.read_text())
            if version_match:
                version = version_match.group(1)
    return version

def sp_code_in_scad_comment(calling_file):
    """
    Once a SCAD file has been created, it's difficult to reconstruct
    how it got there, since it has no variables, modules, etc.  So, include
    the Python code that generated the scad code as comments at the end of
    the SCAD code
    """
    pyopenscad_str = Path(calling_file).read_text()

    # TODO: optimally, this would also include a version number and
    # git hash (& date & github URL?) for the version of solidpython used
    # to create a given file; That would future-proof any given SP-created
    # code because it would point to the relevant dependencies as well as
    # the actual code
    pyopenscad_str = (f"\n"
                      f"/***********************************************\n"
                      f"*********      SolidPython code:      **********\n"
                      f"************************************************\n"
                      f" \n"
                      f"{pyopenscad_str} \n"
                      f" \n"
                      f"************************************************/\n")
    return pyopenscad_str


