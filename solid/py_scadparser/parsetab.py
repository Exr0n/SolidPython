
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocNO_ELSEnonassocELSEAND ASSERT EACH ECHO ELSE EQUAL FALSE FILENAME FOR FUNCTION GREATER_OR_EQUAL ID IF INCLUDE LESS_OR_EQUAL LET MODULE NOT_EQUAL NUMBER OR STRING TRUE UNDEF USEinput :input : input USE FILENAME\n            | input INCLUDE FILENAMEinput : input statementstatement : ';'\n        | '{' inner_input '}'\n        | module_instantiation\n        statement : assignmentstatement : MODULE ID '(' parameters optional_commas ')' statement\n                 | FUNCTION ID '(' parameters optional_commas ')' '=' expr ';'\n    inner_input :\n        | inner_input statement\n    assignment : ID '=' expr ';'module_instantiation : '!' module_instantiation\n        | '#' module_instantiation\n        | '%' module_instantiation\n        | '*' module_instantiation\n        | single_module_instantiation child_statement\n        | ifelse_statement\n    ifelse_statement : if_statement %prec NO_ELSE\n        | if_statement ELSE child_statement\n    if_statement : IF '(' expr ')' child_statement\n    child_statements :\n        | child_statements child_statement\n        | child_statements assignment\n    child_statement : ';'\n        | '{' child_statements '}'\n        | module_instantiation\n    module_id : ID\n        | FOR\n        | LET\n        | ASSERT\n        | ECHO\n        | EACH\n    single_module_instantiation : module_id '(' arguments ')'\n    expr : logic_or\n        | FUNCTION '(' parameters optional_commas ')' expr %prec NO_ELSE\n        | logic_or '?' expr ':' expr\n        | LET '(' arguments ')' expr\n        | ASSERT '(' arguments ')' expr_or_empty\n        | ECHO '(' arguments ')' expr_or_empty\n    logic_or : logic_and\n        | logic_or OR logic_and\n    logic_and : equality\n        | logic_and AND equality\n    equality : comparison\n        | equality EQUAL comparison\n        | equality NOT_EQUAL comparison\n    comparison : addition\n        | comparison '>' addition\n        | comparison GREATER_OR_EQUAL addition\n        | comparison '<' addition\n        | comparison LESS_OR_EQUAL addition\n    addition : multiplication\n        | addition '+' multiplication\n        | addition '-' multiplication\n    multiplication : unary\n        | multiplication '*' unary\n        | multiplication '/' unary\n        | multiplication '%' unary\n    unary : exponent\n        | '+' unary\n        | '-' unary\n        | '!' unary\n    exponent : call\n        | call '^' unary\n    call : primary\n        | call '(' arguments ')'\n        | call '[' expr ']'\n        | call '.' ID\n    primary : TRUE\n        | FALSE\n        | UNDEF\n        | NUMBER\n        | STRING\n        | ID\n        | '(' expr ')'\n        | '[' expr ':' expr ']'\n        | '[' expr ':' expr ':' expr ']'\n        | '[' optional_commas ']'\n        | '[' vector_expr optional_commas ']'\n    expr_or_empty :\n          | expr\n    list_comprehension_elements : LET '(' arguments ')' list_comprehension_elements_p\n        | EACH list_comprehension_elements_or_expr\n        | FOR '(' arguments ')' list_comprehension_elements_or_expr\n        | FOR '(' arguments ';' expr ';' arguments ')' list_comprehension_elements_or_expr\n        | IF '(' expr ')' list_comprehension_elements_or_expr %prec NO_ELSE\n        | IF '(' expr ')' list_comprehension_elements_or_expr ELSE list_comprehension_elements_or_expr\n    list_comprehension_elements_p : list_comprehension_elements\n        | '(' list_comprehension_elements ')'\n    list_comprehension_elements_or_expr : list_comprehension_elements_p\n        | expr\n    optional_commas :\n          | ',' optional_commas\n    vector_expr : expr\n        | list_comprehension_elements\n        | vector_expr ',' optional_commas list_comprehension_elements_or_expr\n    parameters :\n        | parameter\n        | parameters ',' optional_commas parameter\n    parameter : ID\n        | ID '=' expr\n    arguments :\n        | argument\n        | arguments ',' optional_commas argument\n    argument : expr\n        | ID '=' expr\n    "
    
_lr_action_items = {'USE':([0,1,4,5,7,8,17,19,26,27,32,34,35,36,37,38,40,44,79,84,121,170,191,221,],[-1,2,-4,-5,-7,-8,-19,-20,-2,-3,-14,-15,-16,-17,-18,-26,-28,-6,-21,-13,-27,-22,-9,-10,]),'INCLUDE':([0,1,4,5,7,8,17,19,26,27,32,34,35,36,37,38,40,44,79,84,121,170,191,221,],[-1,3,-4,-5,-7,-8,-19,-20,-2,-3,-14,-15,-16,-17,-18,-26,-28,-6,-21,-13,-27,-22,-9,-10,]),';':([0,1,4,5,6,7,8,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,47,48,49,55,56,57,58,59,62,63,65,66,68,69,70,71,72,74,76,77,78,79,84,104,105,106,121,122,123,124,127,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,165,169,170,172,177,178,179,180,182,187,190,191,193,195,196,197,198,200,209,214,216,217,221,],[-1,5,-4,-5,-11,-7,-8,38,-19,-20,-2,-3,5,-14,-15,-16,-17,-18,-26,-23,-28,38,-6,-12,-76,84,-36,-42,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,38,-105,-107,-76,-21,-13,-62,-63,-64,-27,-24,-25,-35,38,-43,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-104,-108,-22,5,-82,-82,-68,-69,-81,206,-106,-9,-38,-39,-40,-83,-41,-78,-37,219,221,-79,-10,]),'{':([0,1,4,5,6,7,8,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,74,79,84,121,122,123,124,127,170,172,191,221,],[-1,6,-4,-5,-11,-7,-8,39,-19,-20,-2,-3,6,-14,-15,-16,-17,-18,-26,-23,-28,39,-6,-12,39,-21,-13,-27,-24,-25,-35,39,-22,6,-9,-10,]),'MODULE':([0,1,4,5,6,7,8,17,19,26,27,28,32,34,35,36,37,38,40,44,45,79,84,121,170,172,191,221,],[-1,9,-4,-5,-11,-7,-8,-19,-20,-2,-3,9,-14,-15,-16,-17,-18,-26,-28,-6,-12,-21,-13,-27,-22,9,-9,-10,]),'FUNCTION':([0,1,4,5,6,7,8,17,19,26,27,28,30,32,34,35,36,37,38,40,41,43,44,45,51,67,79,84,85,89,90,91,108,109,115,117,121,125,126,128,154,157,158,159,164,165,166,168,170,172,174,176,177,178,183,191,194,199,202,204,205,206,207,208,218,219,220,221,224,],[-1,11,-4,-5,-11,-7,-8,-19,-20,-2,-3,11,50,-14,-15,-16,-17,-18,-26,-28,50,50,-6,-12,50,50,-21,-13,50,50,50,50,50,50,-94,50,-27,-94,50,50,50,-94,50,-95,50,50,50,50,-22,11,50,50,50,50,50,-9,50,50,50,50,50,50,50,50,50,50,50,-10,50,]),'!':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,51,60,61,64,67,74,79,84,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,121,122,123,124,125,126,127,128,154,157,158,159,164,165,166,168,170,172,174,176,177,178,183,191,194,199,202,204,205,206,207,208,218,219,220,221,224,],[-1,12,-4,-5,-11,-7,-8,12,12,12,12,12,-19,-20,-2,-3,12,64,-14,-15,-16,-17,-18,-26,-23,-28,64,12,64,-6,-12,64,64,64,64,64,12,-21,-13,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-94,64,-27,-24,-25,-35,-94,64,12,64,64,-94,64,-95,64,64,64,64,-22,12,64,64,64,64,64,-9,64,64,64,64,64,64,64,64,64,64,64,-10,64,]),'#':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,74,79,84,121,122,123,124,127,170,172,191,221,],[-1,13,-4,-5,-11,-7,-8,13,13,13,13,13,-19,-20,-2,-3,13,-14,-15,-16,-17,-18,-26,-23,-28,13,-6,-12,13,-21,-13,-27,-24,-25,-35,13,-22,13,-9,-10,]),'%':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,47,59,62,63,65,66,68,69,70,71,72,74,78,79,84,104,105,106,121,122,123,124,127,134,145,146,147,148,149,150,153,155,170,172,179,180,182,191,200,217,221,],[-1,14,-4,-5,-11,-7,-8,14,14,14,14,14,-19,-20,-2,-3,14,-14,-15,-16,-17,-18,-26,-23,-28,14,-6,-12,-76,103,-57,-61,-65,-67,-71,-72,-73,-74,-75,14,-76,-21,-13,-62,-63,-64,-27,-24,-25,-35,14,-77,103,103,-58,-59,-60,-66,-70,-80,-22,14,-68,-69,-81,-9,-78,-79,-10,]),'*':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,47,59,62,63,65,66,68,69,70,71,72,74,78,79,84,104,105,106,121,122,123,124,127,134,145,146,147,148,149,150,153,155,170,172,179,180,182,191,200,217,221,],[-1,15,-4,-5,-11,-7,-8,15,15,15,15,15,-19,-20,-2,-3,15,-14,-15,-16,-17,-18,-26,-23,-28,15,-6,-12,-76,101,-57,-61,-65,-67,-71,-72,-73,-74,-75,15,-76,-21,-13,-62,-63,-64,-27,-24,-25,-35,15,-77,101,101,-58,-59,-60,-66,-70,-80,-22,15,-68,-69,-81,-9,-78,-79,-10,]),'ID':([0,1,4,5,6,7,8,9,11,12,13,14,15,16,17,19,26,27,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,51,60,61,64,67,73,74,79,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,110,115,117,121,122,123,124,125,126,127,128,130,154,157,158,159,164,165,166,168,170,172,173,174,176,177,178,183,191,194,199,202,204,205,206,207,208,218,219,220,221,224,],[-1,10,-4,-5,-11,-7,-8,29,31,33,33,33,33,33,-19,-20,-2,-3,10,47,-14,-15,-16,-17,-18,-26,-23,-28,78,33,47,-6,-12,81,47,47,47,47,47,81,10,-21,-13,47,47,81,78,78,78,47,47,47,47,47,47,47,47,47,47,47,47,47,78,47,153,-94,47,-27,-24,-25,-35,-94,47,33,47,-94,47,-94,78,-95,47,78,47,78,-22,10,81,47,47,47,47,47,-9,47,47,47,78,47,47,47,47,47,78,47,-10,47,]),'FOR':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,67,74,79,84,115,117,121,122,123,124,127,157,159,164,170,172,183,191,202,205,207,218,220,221,224,],[-1,20,-4,-5,-11,-7,-8,20,20,20,20,20,-19,-20,-2,-3,20,-14,-15,-16,-17,-18,-26,-23,-28,20,-6,-12,118,20,-21,-13,-94,118,-27,-24,-25,-35,20,-94,-95,118,-22,20,118,-9,118,118,118,118,118,-10,118,]),'LET':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,51,67,74,79,84,85,89,90,91,108,109,115,117,121,122,123,124,125,126,127,128,154,157,158,159,164,165,166,168,170,172,174,176,177,178,183,191,194,199,202,204,205,206,207,208,218,219,220,221,224,],[-1,21,-4,-5,-11,-7,-8,21,21,21,21,21,-19,-20,-2,-3,21,52,-14,-15,-16,-17,-18,-26,-23,-28,52,21,52,-6,-12,52,114,21,-21,-13,52,52,52,52,52,52,-94,114,-27,-24,-25,-35,-94,52,21,52,52,-94,52,-95,186,52,52,52,-22,21,52,52,52,52,114,-9,52,52,114,52,114,52,114,52,114,52,114,-10,114,]),'ASSERT':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,51,67,74,79,84,85,89,90,91,108,109,115,117,121,122,123,124,125,126,127,128,154,157,158,159,164,165,166,168,170,172,174,176,177,178,183,191,194,199,202,204,205,206,207,208,218,219,220,221,224,],[-1,22,-4,-5,-11,-7,-8,22,22,22,22,22,-19,-20,-2,-3,22,53,-14,-15,-16,-17,-18,-26,-23,-28,53,22,53,-6,-12,53,53,22,-21,-13,53,53,53,53,53,53,-94,53,-27,-24,-25,-35,-94,53,22,53,53,-94,53,-95,53,53,53,53,-22,22,53,53,53,53,53,-9,53,53,53,53,53,53,53,53,53,53,53,-10,53,]),'ECHO':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,30,32,34,35,36,37,38,39,40,41,42,43,44,45,51,67,74,79,84,85,89,90,91,108,109,115,117,121,122,123,124,125,126,127,128,154,157,158,159,164,165,166,168,170,172,174,176,177,178,183,191,194,199,202,204,205,206,207,208,218,219,220,221,224,],[-1,23,-4,-5,-11,-7,-8,23,23,23,23,23,-19,-20,-2,-3,23,54,-14,-15,-16,-17,-18,-26,-23,-28,54,23,54,-6,-12,54,54,23,-21,-13,54,54,54,54,54,54,-94,54,-27,-24,-25,-35,-94,54,23,54,54,-94,54,-95,54,54,54,54,-22,23,54,54,54,54,54,-9,54,54,54,54,54,54,54,54,54,54,54,-10,54,]),'EACH':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,67,74,79,84,115,117,121,122,123,124,127,157,159,164,170,172,183,191,202,205,207,218,220,221,224,],[-1,24,-4,-5,-11,-7,-8,24,24,24,24,24,-19,-20,-2,-3,24,-14,-15,-16,-17,-18,-26,-23,-28,24,-6,-12,117,24,-21,-13,-94,117,-27,-24,-25,-35,24,-94,-95,117,-22,24,117,-9,117,117,117,117,117,-10,117,]),'IF':([0,1,4,5,6,7,8,12,13,14,15,16,17,19,26,27,28,32,34,35,36,37,38,39,40,42,44,45,67,74,79,84,115,117,121,122,123,124,127,157,159,164,170,172,183,191,202,205,207,218,220,221,224,],[-1,25,-4,-5,-11,-7,-8,25,25,25,25,25,-19,-20,-2,-3,25,-14,-15,-16,-17,-18,-26,-23,-28,25,-6,-12,119,25,-21,-13,-94,119,-27,-24,-25,-35,25,-94,-95,119,-22,25,119,-9,119,119,119,119,119,-10,119,]),'$end':([0,1,4,5,7,8,17,19,26,27,32,34,35,36,37,38,40,44,79,84,121,170,191,221,],[-1,0,-4,-5,-7,-8,-19,-20,-2,-3,-14,-15,-16,-17,-18,-26,-28,-6,-21,-13,-27,-22,-9,-10,]),'FILENAME':([2,3,],[26,27,]),'}':([5,6,7,8,17,19,28,32,34,35,36,37,38,39,40,44,45,74,79,84,121,122,123,170,191,221,],[-5,-11,-7,-8,-19,-20,44,-14,-15,-16,-17,-18,-26,-23,-28,-6,-12,121,-21,-13,-27,-24,-25,-22,-9,-10,]),'=':([10,78,81,189,],[30,126,128,208,]),'(':([10,18,20,21,22,23,24,25,29,30,31,33,41,43,47,50,51,52,53,54,60,61,64,65,66,67,68,69,70,71,72,78,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,114,115,117,118,119,125,126,128,134,153,154,155,157,158,159,164,165,166,168,174,176,177,178,179,180,182,183,186,194,199,200,202,204,205,206,207,208,217,218,219,220,224,],[-29,41,-30,-31,-32,-33,-34,43,46,51,73,-29,51,51,-76,87,51,89,90,91,51,51,51,108,-67,51,-71,-72,-73,-74,-75,-76,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,158,-94,164,165,166,-94,51,51,-77,-70,51,-80,-94,51,-95,51,51,51,51,51,51,51,51,-68,-69,-81,164,204,51,51,-78,164,51,164,51,164,51,-79,164,51,164,164,]),'ELSE':([17,19,32,34,35,36,37,38,40,47,49,55,56,57,58,59,62,63,65,66,68,69,70,71,72,79,104,105,106,121,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,160,161,162,163,170,177,178,179,180,182,193,195,196,197,198,200,203,209,211,213,215,217,223,225,],[-19,42,-14,-15,-16,-17,-18,-26,-28,-76,-36,-42,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-21,-62,-63,-64,-27,-43,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-85,-92,-93,-90,-22,-82,-82,-68,-69,-81,-38,-39,-40,-83,-41,-78,-91,-37,-84,-86,220,-79,-89,-87,]),'+':([30,41,43,47,51,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,115,117,125,126,128,134,141,142,143,144,145,146,147,148,149,150,153,154,155,157,158,159,164,165,166,168,174,176,177,178,179,180,182,183,194,199,200,202,204,205,206,207,208,217,218,219,220,224,],[60,60,60,-76,60,99,-54,60,60,-57,-61,60,-65,-67,60,-71,-72,-73,-74,-75,-76,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-62,-63,-64,60,60,60,-94,60,-94,60,60,-77,99,99,99,99,-55,-56,-58,-59,-60,-66,-70,60,-80,-94,60,-95,60,60,60,60,60,60,60,60,-68,-69,-81,60,60,60,-78,60,60,60,60,60,60,-79,60,60,60,60,]),'-':([30,41,43,47,51,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,115,117,125,126,128,134,141,142,143,144,145,146,147,148,149,150,153,154,155,157,158,159,164,165,166,168,174,176,177,178,179,180,182,183,194,199,200,202,204,205,206,207,208,217,218,219,220,224,],[61,61,61,-76,61,100,-54,61,61,-57,-61,61,-65,-67,61,-71,-72,-73,-74,-75,-76,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-62,-63,-64,61,61,61,-94,61,-94,61,61,-77,100,100,100,100,-55,-56,-58,-59,-60,-66,-70,61,-80,-94,61,-95,61,61,61,61,61,61,61,61,-68,-69,-81,61,61,61,-78,61,61,61,61,61,61,-79,61,61,61,61,]),'TRUE':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,125,126,128,154,157,158,159,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-94,68,-94,68,68,68,-94,68,-95,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'FALSE':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,125,126,128,154,157,158,159,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-94,69,-94,69,69,69,-94,69,-95,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'UNDEF':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,125,126,128,154,157,158,159,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-94,70,-94,70,70,70,-94,70,-95,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'NUMBER':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,125,126,128,154,157,158,159,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-94,71,-94,71,71,71,-94,71,-95,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'STRING':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,125,126,128,154,157,158,159,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-94,72,-94,72,72,72,-94,72,-95,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'[':([30,41,43,47,51,60,61,64,65,66,67,68,69,70,71,72,78,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,115,117,125,126,128,134,153,154,155,157,158,159,164,165,166,168,174,176,177,178,179,180,182,183,194,199,200,202,204,205,206,207,208,217,218,219,220,224,],[67,67,67,-76,67,67,67,67,109,-67,67,-71,-72,-73,-74,-75,-76,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-94,67,-94,67,67,-77,-70,67,-80,-94,67,-95,67,67,67,67,67,67,67,67,-68,-69,-81,67,67,67,-78,67,67,67,67,67,67,-79,67,67,67,67,]),')':([41,46,47,49,55,56,57,58,59,62,63,65,66,68,69,70,71,72,73,75,76,77,78,80,81,82,83,87,88,89,90,91,104,105,106,108,115,120,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,158,159,160,161,162,163,165,167,169,171,173,175,177,178,179,180,182,184,185,187,188,190,192,193,195,196,197,198,200,203,204,209,211,212,213,215,217,219,222,223,225,],[-104,-99,-76,-36,-42,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-99,124,-105,-107,-76,127,-102,-94,-100,-99,134,-104,-104,-104,-62,-63,-64,-104,-94,-94,172,-94,-43,-94,-77,176,177,178,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,179,-70,-80,-104,-95,-85,-92,-93,-90,-104,189,-108,-103,-95,194,-82,-82,-68,-69,-81,202,203,205,207,-106,-101,-38,-39,-40,-83,-41,-78,-91,-104,-37,-84,218,-86,-88,-79,-104,224,-89,-87,]),',':([41,46,47,49,55,56,57,58,59,62,63,65,66,67,68,69,70,71,72,73,75,76,77,78,81,82,83,87,89,90,91,104,105,106,108,111,113,115,116,120,125,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,157,158,160,161,162,163,165,169,171,177,178,179,180,182,184,187,190,192,193,195,196,197,198,200,201,203,204,209,211,212,213,215,217,219,222,223,225,],[-104,-99,-76,-36,-42,-44,-46,-49,-54,-57,-61,-65,-67,115,-71,-72,-73,-74,-75,-99,125,-105,-107,-76,-102,130,-100,-99,-104,-104,-104,-62,-63,-64,-104,-96,157,115,-97,130,115,115,-43,130,-77,125,125,125,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,125,-70,-80,115,-104,-85,-92,-93,-90,-104,-108,-103,-82,-82,-68,-69,-81,125,125,-106,-101,-38,-39,-40,-83,-41,-78,-98,-91,-104,-37,-84,125,-86,-88,-79,-104,125,-89,-87,]),'^':([47,65,66,68,69,70,71,72,78,134,153,155,179,180,182,200,217,],[-76,107,-67,-71,-72,-73,-74,-75,-76,-77,-70,-80,-68,-69,-81,-78,-79,]),'.':([47,65,66,68,69,70,71,72,78,134,153,155,179,180,182,200,217,],[-76,110,-67,-71,-72,-73,-74,-75,-76,-77,-70,-80,-68,-69,-81,-78,-79,]),'/':([47,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,102,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,102,102,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'>':([47,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,95,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,95,95,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'GREATER_OR_EQUAL':([47,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,96,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,96,96,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'<':([47,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,97,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,97,97,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'LESS_OR_EQUAL':([47,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,98,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,98,98,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'EQUAL':([47,56,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,93,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,93,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'NOT_EQUAL':([47,56,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,94,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-77,94,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'AND':([47,55,56,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,92,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,92,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'?':([47,49,55,56,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,85,-42,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-43,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),'OR':([47,49,55,56,57,58,59,62,63,65,66,68,69,70,71,72,78,104,105,106,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,179,180,182,200,217,],[-76,86,-42,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-76,-62,-63,-64,-43,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-68,-69,-81,-78,-79,]),':':([47,49,55,56,57,58,59,62,63,65,66,68,69,70,71,72,104,105,106,111,131,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,177,178,179,180,181,182,193,195,196,197,198,200,209,217,],[-76,-36,-42,-44,-46,-49,-54,-57,-61,-65,-67,-71,-72,-73,-74,-75,-62,-63,-64,154,174,-43,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,-70,-80,-82,-82,-68,-69,199,-81,-38,-39,-40,-83,-41,-78,-37,-79,]),']':([47,49,55,56,57,58,59,62,63,65,66,67,68,69,70,71,72,104,105,106,111,112,113,115,116,132,134,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,155,156,157,159,160,161,162,163,177,178,179,180,181,182,183,193,195,196,197,198,200,201,203,209,210,211,213,215,217,223,225,],[-76,-36,-42,-44,-46,-49,-54,-57,-61,-65,-67,-94,-71,-72,-73,-74,-75,-62,-63,-64,-96,155,-94,-94,-97,-43,-77,-45,-47,-48,-50,-51,-52,-53,-55,-56,-58,-59,-60,-66,180,-70,-80,182,-94,-95,-85,-92,-93,-90,-82,-82,-68,-69,200,-81,-95,-38,-39,-40,-83,-41,-78,-98,-91,-37,217,-84,-86,-88,-79,-89,-87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'input':([0,],[1,]),'statement':([1,28,172,],[4,45,191,]),'module_instantiation':([1,12,13,14,15,16,28,42,74,127,172,],[7,32,34,35,36,40,7,40,40,40,7,]),'assignment':([1,28,74,172,],[8,8,123,8,]),'single_module_instantiation':([1,12,13,14,15,16,28,42,74,127,172,],[16,16,16,16,16,16,16,16,16,16,16,]),'ifelse_statement':([1,12,13,14,15,16,28,42,74,127,172,],[17,17,17,17,17,17,17,17,17,17,17,]),'module_id':([1,12,13,14,15,16,28,42,74,127,172,],[18,18,18,18,18,18,18,18,18,18,18,]),'if_statement':([1,12,13,14,15,16,28,42,74,127,172,],[19,19,19,19,19,19,19,19,19,19,19,]),'inner_input':([6,],[28,]),'child_statement':([16,42,74,127,],[37,79,122,170,]),'expr':([30,41,43,51,67,85,89,90,91,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[48,77,80,88,111,131,77,77,77,77,152,162,169,171,181,77,88,77,188,77,193,195,197,197,162,209,210,195,77,162,214,162,216,195,77,162,162,]),'logic_or':([30,41,43,51,67,85,89,90,91,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'logic_and':([30,41,43,51,67,85,86,89,90,91,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[55,55,55,55,55,55,132,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'equality':([30,41,43,51,67,85,86,89,90,91,92,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[56,56,56,56,56,56,56,56,56,56,138,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'comparison':([30,41,43,51,67,85,86,89,90,91,92,93,94,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[57,57,57,57,57,57,57,57,57,57,57,139,140,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'addition':([30,41,43,51,67,85,86,89,90,91,92,93,94,95,96,97,98,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[58,58,58,58,58,58,58,58,58,58,58,58,58,141,142,143,144,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'multiplication':([30,41,43,51,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,145,146,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'unary':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[62,62,62,62,104,105,106,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,147,148,149,150,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'exponent':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'call':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'primary':([30,41,43,51,60,61,64,67,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,107,108,109,117,126,128,154,158,164,165,166,168,174,176,177,178,183,194,199,202,204,205,206,207,208,218,219,220,224,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'child_statements':([39,],[74,]),'arguments':([41,89,90,91,108,158,165,204,219,],[75,135,136,137,151,184,187,212,222,]),'argument':([41,89,90,91,108,158,165,168,204,219,],[76,76,76,76,76,76,76,190,76,76,]),'parameters':([46,73,87,],[82,120,133,]),'parameter':([46,73,87,173,],[83,83,83,192,]),'optional_commas':([67,82,113,115,120,125,130,133,157,],[112,129,156,159,167,168,173,175,183,]),'vector_expr':([67,],[113,]),'list_comprehension_elements':([67,117,164,183,202,205,207,218,220,224,],[116,163,185,163,163,163,163,163,163,163,]),'list_comprehension_elements_or_expr':([117,183,205,207,220,224,],[160,201,213,215,223,225,]),'list_comprehension_elements_p':([117,183,202,205,207,218,220,224,],[161,161,211,161,161,211,161,161,]),'expr_or_empty':([177,178,],[196,198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> input","S'",1,None,None,None),
  ('input -> <empty>','input',0,'p_input','scad_parser2.py',17),
  ('input -> input USE FILENAME','input',3,'p_input_use','scad_parser2.py',21),
  ('input -> input INCLUDE FILENAME','input',3,'p_input_use','scad_parser2.py',22),
  ('input -> input statement','input',2,'p_input_statement','scad_parser2.py',26),
  ('statement -> ;','statement',1,'p_statement','scad_parser2.py',32),
  ('statement -> { inner_input }','statement',3,'p_statement','scad_parser2.py',33),
  ('statement -> module_instantiation','statement',1,'p_statement','scad_parser2.py',34),
  ('statement -> assignment','statement',1,'p_statement_assigment','scad_parser2.py',39),
  ('statement -> MODULE ID ( parameters optional_commas ) statement','statement',7,'p_statement_function','scad_parser2.py',43),
  ('statement -> FUNCTION ID ( parameters optional_commas ) = expr ;','statement',9,'p_statement_function','scad_parser2.py',44),
  ('inner_input -> <empty>','inner_input',0,'p_inner_input','scad_parser2.py',54),
  ('inner_input -> inner_input statement','inner_input',2,'p_inner_input','scad_parser2.py',55),
  ('assignment -> ID = expr ;','assignment',4,'p_assignment','scad_parser2.py',59),
  ('module_instantiation -> ! module_instantiation','module_instantiation',2,'p_module_instantiation','scad_parser2.py',63),
  ('module_instantiation -> # module_instantiation','module_instantiation',2,'p_module_instantiation','scad_parser2.py',64),
  ('module_instantiation -> % module_instantiation','module_instantiation',2,'p_module_instantiation','scad_parser2.py',65),
  ('module_instantiation -> * module_instantiation','module_instantiation',2,'p_module_instantiation','scad_parser2.py',66),
  ('module_instantiation -> single_module_instantiation child_statement','module_instantiation',2,'p_module_instantiation','scad_parser2.py',67),
  ('module_instantiation -> ifelse_statement','module_instantiation',1,'p_module_instantiation','scad_parser2.py',68),
  ('ifelse_statement -> if_statement','ifelse_statement',1,'p_ifelse_statement','scad_parser2.py',72),
  ('ifelse_statement -> if_statement ELSE child_statement','ifelse_statement',3,'p_ifelse_statement','scad_parser2.py',73),
  ('if_statement -> IF ( expr ) child_statement','if_statement',5,'p_if_statement','scad_parser2.py',77),
  ('child_statements -> <empty>','child_statements',0,'p_child_statements','scad_parser2.py',81),
  ('child_statements -> child_statements child_statement','child_statements',2,'p_child_statements','scad_parser2.py',82),
  ('child_statements -> child_statements assignment','child_statements',2,'p_child_statements','scad_parser2.py',83),
  ('child_statement -> ;','child_statement',1,'p_child_statement','scad_parser2.py',87),
  ('child_statement -> { child_statements }','child_statement',3,'p_child_statement','scad_parser2.py',88),
  ('child_statement -> module_instantiation','child_statement',1,'p_child_statement','scad_parser2.py',89),
  ('module_id -> ID','module_id',1,'p_module_id','scad_parser2.py',93),
  ('module_id -> FOR','module_id',1,'p_module_id','scad_parser2.py',94),
  ('module_id -> LET','module_id',1,'p_module_id','scad_parser2.py',95),
  ('module_id -> ASSERT','module_id',1,'p_module_id','scad_parser2.py',96),
  ('module_id -> ECHO','module_id',1,'p_module_id','scad_parser2.py',97),
  ('module_id -> EACH','module_id',1,'p_module_id','scad_parser2.py',98),
  ('single_module_instantiation -> module_id ( arguments )','single_module_instantiation',4,'p_single_module_instantiation','scad_parser2.py',102),
  ('expr -> logic_or','expr',1,'p_expr','scad_parser2.py',106),
  ('expr -> FUNCTION ( parameters optional_commas ) expr','expr',6,'p_expr','scad_parser2.py',107),
  ('expr -> logic_or ? expr : expr','expr',5,'p_expr','scad_parser2.py',108),
  ('expr -> LET ( arguments ) expr','expr',5,'p_expr','scad_parser2.py',109),
  ('expr -> ASSERT ( arguments ) expr_or_empty','expr',5,'p_expr','scad_parser2.py',110),
  ('expr -> ECHO ( arguments ) expr_or_empty','expr',5,'p_expr','scad_parser2.py',111),
  ('logic_or -> logic_and','logic_or',1,'p_logic_or','scad_parser2.py',115),
  ('logic_or -> logic_or OR logic_and','logic_or',3,'p_logic_or','scad_parser2.py',116),
  ('logic_and -> equality','logic_and',1,'p_logic_and','scad_parser2.py',120),
  ('logic_and -> logic_and AND equality','logic_and',3,'p_logic_and','scad_parser2.py',121),
  ('equality -> comparison','equality',1,'p_equality','scad_parser2.py',125),
  ('equality -> equality EQUAL comparison','equality',3,'p_equality','scad_parser2.py',126),
  ('equality -> equality NOT_EQUAL comparison','equality',3,'p_equality','scad_parser2.py',127),
  ('comparison -> addition','comparison',1,'p_comparison','scad_parser2.py',131),
  ('comparison -> comparison > addition','comparison',3,'p_comparison','scad_parser2.py',132),
  ('comparison -> comparison GREATER_OR_EQUAL addition','comparison',3,'p_comparison','scad_parser2.py',133),
  ('comparison -> comparison < addition','comparison',3,'p_comparison','scad_parser2.py',134),
  ('comparison -> comparison LESS_OR_EQUAL addition','comparison',3,'p_comparison','scad_parser2.py',135),
  ('addition -> multiplication','addition',1,'p_addition','scad_parser2.py',139),
  ('addition -> addition + multiplication','addition',3,'p_addition','scad_parser2.py',140),
  ('addition -> addition - multiplication','addition',3,'p_addition','scad_parser2.py',141),
  ('multiplication -> unary','multiplication',1,'p_multiplication','scad_parser2.py',145),
  ('multiplication -> multiplication * unary','multiplication',3,'p_multiplication','scad_parser2.py',146),
  ('multiplication -> multiplication / unary','multiplication',3,'p_multiplication','scad_parser2.py',147),
  ('multiplication -> multiplication % unary','multiplication',3,'p_multiplication','scad_parser2.py',148),
  ('unary -> exponent','unary',1,'p_unary','scad_parser2.py',152),
  ('unary -> + unary','unary',2,'p_unary','scad_parser2.py',153),
  ('unary -> - unary','unary',2,'p_unary','scad_parser2.py',154),
  ('unary -> ! unary','unary',2,'p_unary','scad_parser2.py',155),
  ('exponent -> call','exponent',1,'p_exponent','scad_parser2.py',159),
  ('exponent -> call ^ unary','exponent',3,'p_exponent','scad_parser2.py',160),
  ('call -> primary','call',1,'p_call','scad_parser2.py',164),
  ('call -> call ( arguments )','call',4,'p_call','scad_parser2.py',165),
  ('call -> call [ expr ]','call',4,'p_call','scad_parser2.py',166),
  ('call -> call . ID','call',3,'p_call','scad_parser2.py',167),
  ('primary -> TRUE','primary',1,'p_primary','scad_parser2.py',171),
  ('primary -> FALSE','primary',1,'p_primary','scad_parser2.py',172),
  ('primary -> UNDEF','primary',1,'p_primary','scad_parser2.py',173),
  ('primary -> NUMBER','primary',1,'p_primary','scad_parser2.py',174),
  ('primary -> STRING','primary',1,'p_primary','scad_parser2.py',175),
  ('primary -> ID','primary',1,'p_primary','scad_parser2.py',176),
  ('primary -> ( expr )','primary',3,'p_primary','scad_parser2.py',177),
  ('primary -> [ expr : expr ]','primary',5,'p_primary','scad_parser2.py',178),
  ('primary -> [ expr : expr : expr ]','primary',7,'p_primary','scad_parser2.py',179),
  ('primary -> [ optional_commas ]','primary',3,'p_primary','scad_parser2.py',180),
  ('primary -> [ vector_expr optional_commas ]','primary',4,'p_primary','scad_parser2.py',181),
  ('expr_or_empty -> <empty>','expr_or_empty',0,'p_expr_or_empty','scad_parser2.py',185),
  ('expr_or_empty -> expr','expr_or_empty',1,'p_expr_or_empty','scad_parser2.py',186),
  ('list_comprehension_elements -> LET ( arguments ) list_comprehension_elements_p','list_comprehension_elements',5,'p_list_comprehension_elements','scad_parser2.py',190),
  ('list_comprehension_elements -> EACH list_comprehension_elements_or_expr','list_comprehension_elements',2,'p_list_comprehension_elements','scad_parser2.py',191),
  ('list_comprehension_elements -> FOR ( arguments ) list_comprehension_elements_or_expr','list_comprehension_elements',5,'p_list_comprehension_elements','scad_parser2.py',192),
  ('list_comprehension_elements -> FOR ( arguments ; expr ; arguments ) list_comprehension_elements_or_expr','list_comprehension_elements',9,'p_list_comprehension_elements','scad_parser2.py',193),
  ('list_comprehension_elements -> IF ( expr ) list_comprehension_elements_or_expr','list_comprehension_elements',5,'p_list_comprehension_elements','scad_parser2.py',194),
  ('list_comprehension_elements -> IF ( expr ) list_comprehension_elements_or_expr ELSE list_comprehension_elements_or_expr','list_comprehension_elements',7,'p_list_comprehension_elements','scad_parser2.py',195),
  ('list_comprehension_elements_p -> list_comprehension_elements','list_comprehension_elements_p',1,'p_list_comprehension_elements_p','scad_parser2.py',199),
  ('list_comprehension_elements_p -> ( list_comprehension_elements )','list_comprehension_elements_p',3,'p_list_comprehension_elements_p','scad_parser2.py',200),
  ('list_comprehension_elements_or_expr -> list_comprehension_elements_p','list_comprehension_elements_or_expr',1,'p_list_comprehension_elements_or_expr','scad_parser2.py',204),
  ('list_comprehension_elements_or_expr -> expr','list_comprehension_elements_or_expr',1,'p_list_comprehension_elements_or_expr','scad_parser2.py',205),
  ('optional_commas -> <empty>','optional_commas',0,'p_optional_commas','scad_parser2.py',209),
  ('optional_commas -> , optional_commas','optional_commas',2,'p_optional_commas','scad_parser2.py',210),
  ('vector_expr -> expr','vector_expr',1,'p_vector_expr','scad_parser2.py',214),
  ('vector_expr -> list_comprehension_elements','vector_expr',1,'p_vector_expr','scad_parser2.py',215),
  ('vector_expr -> vector_expr , optional_commas list_comprehension_elements_or_expr','vector_expr',4,'p_vector_expr','scad_parser2.py',216),
  ('parameters -> <empty>','parameters',0,'p_parameters','scad_parser2.py',220),
  ('parameters -> parameter','parameters',1,'p_parameters','scad_parser2.py',221),
  ('parameters -> parameters , optional_commas parameter','parameters',4,'p_parameters','scad_parser2.py',222),
  ('parameter -> ID','parameter',1,'p_parameter','scad_parser2.py',233),
  ('parameter -> ID = expr','parameter',3,'p_parameter','scad_parser2.py',234),
  ('arguments -> <empty>','arguments',0,'p_arguments','scad_parser2.py',239),
  ('arguments -> argument','arguments',1,'p_arguments','scad_parser2.py',240),
  ('arguments -> arguments , optional_commas argument','arguments',4,'p_arguments','scad_parser2.py',241),
  ('argument -> expr','argument',1,'p_argument','scad_parser2.py',245),
  ('argument -> ID = expr','argument',3,'p_argument','scad_parser2.py',246),
]
